#!/bin/sh
# called as "py-compile [--basedir DIR] PY_FILES ...

if [ -z "$PYTHON" ]; then
  PYTHON=python
fi

basedir=
optimize=

endoptions=0
while [ $endoptions == 0 ]; do
    case "$1" in
	--optimize)
	    optimize=1
	    shift
	    ;;
	--python)
	    PYTHON=$2
	    # perhaps this (and --basedir) should complain if there's no
	    # argument, but there probably aren't any files anyway...
	    shift 2 || exit 0
	    ;;
	--basedir)
	    basedir=$2
	    shift 2 || exit 0
	    ;;
	--help)
	    echo "Usage: py-compile [--optimize] [--python PPATH] [--basedir DIR] PY_FILES ..."
	    echo "Byte compile some python scripts.  This should be performed"
	    echo "after they have been moved to the final installation location"
	    exit 0
	    ;;
	--version)
	    echo "py-compile version 0.0"
	    exit 0
	    ;;
	*)
	    endoptions=1
	    ;;
    esac
done

if [ $# = 0 ]; then
    echo "No files given to $0 - nothing to do" 1>&2
    exit 0
fi

# if basedir was given, then it should be prepended to filenames before
# byte compilation.
if [ -z "$basedir" ]; then
    trans="path = file"
else
    trans="path = os.path.join('$basedir', file)"
fi

$PYTHON -c "
import sys, os, string, py_compile

files = '''$*'''
print 'Byte-compiling python modules...'
for file in string.split(files):
    $trans
    if not os.path.exists(path) or not (len(path) >= 3 and path[-3:] == '.py'):
	continue
    print file,
    sys.stdout.flush()
    py_compile.compile(path)
print" || exit $?

if [ -z "$optimize" ]; then
    exit 0
fi

# this will fail for python < 1.5, but that doesn't matter ...
$PYTHON -O -c "
import sys, os, string, py_compile

files = '''$*'''
print 'Byte-compiling python modules (optimised versions) ...'
for file in string.split(files):
    $trans
    if not os.path.exists(path) or not (len(path) >= 3 and path[-3:] == '.py'):
	continue
    print file,
    sys.stdout.flush()
    py_compile.compile(path)
print" 2>/dev/null || :

